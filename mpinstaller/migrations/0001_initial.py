# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-29 13:44
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import mpinstaller.models
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='InstallationError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('hide_from_report', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='InstallationErrorContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolution', tinymce.models.HTMLField()),
            ],
        ),
        migrations.CreateModel(
            name='MetadataCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata_type', models.CharField(max_length=255)),
                ('field', models.CharField(max_length=255)),
                ('search', models.CharField(max_length=255)),
                ('exclude_namespaces', models.CharField(max_length=255)),
                ('method', models.CharField(blank=True, max_length=255, null=True)),
                ('no_match', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='OrgAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField()),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('force_sandbox', models.BooleanField(default=False, help_text=b'If checked, production installs will be blocked unless the action has been successfully run against a sandbox of the production org.')),
                ('content_intro', tinymce.models.HTMLField(blank=True, help_text=b'Shown on the page to start an installation in the Action Information panel if provided.', null=True)),
                ('content_success', tinymce.models.HTMLField(blank=True, help_text=b'Shown on the installation status page after a successful installation in the Next Steps panel if provided.', null=True)),
                ('content_failure', tinymce.models.HTMLField(blank=True, help_text=b'Shown on the installation status page after a failed installation in the Next Steps panel if provided.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('namespace', models.SlugField(max_length=128)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('key', models.CharField(blank=True, max_length=255, null=True)),
                ('force_sandbox', models.BooleanField(default=False, help_text=b'If checked, production installs will be blocked unless a sandbox install of the same org for the same version was successful')),
                ('content_intro', tinymce.models.HTMLField(blank=True, help_text=b'Shown on the page to start an installation in the Package Information panel if provided.', null=True)),
                ('content_success', tinymce.models.HTMLField(blank=True, help_text=b'Shown on the installation status page after a successful installation in the Next Steps panel if provided.', null=True)),
                ('content_failure', tinymce.models.HTMLField(blank=True, help_text=b'Shown on the installation status page after a failed installation in the Next Steps panel if provided.', null=True)),
                ('content_intro_beta', tinymce.models.HTMLField(blank=True, help_text=b'Shown instead of Content intro if the package is a beta.', null=True)),
                ('content_success_beta', tinymce.models.HTMLField(blank=True, help_text=b'Shown instead of Content success if the package is a beta.', null=True)),
                ('content_failure_beta', tinymce.models.HTMLField(blank=True, help_text=b'Shown instead of Content failure if the package is a beta.', null=True)),
            ],
            options={
                'ordering': ['namespace'],
            },
        ),
        migrations.CreateModel(
            name='PackageInstallation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('git_ref', models.CharField(blank=True, max_length=255, null=True)),
                ('fork', models.CharField(blank=True, max_length=255, null=True)),
                ('org_id', models.CharField(max_length=32)),
                ('org_type', models.CharField(max_length=255)),
                ('instance_url', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[(b'Pending', b'Pending'), (b'InProgress', b'In Progress'), (b'Succeeded', b'Succeeded'), (b'Failed', b'Failed')], max_length=32)),
                ('username', models.CharField(max_length=255)),
                ('install_map', models.TextField(blank=True, null=True)),
                ('log', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installations', to='mpinstaller.Package')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='PackageInstallationSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oauth', models.TextField()),
                ('org_packages', models.TextField()),
                ('metadata', models.TextField()),
                ('installation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='mpinstaller.PackageInstallation')),
            ],
        ),
        migrations.CreateModel(
            name='PackageInstallationStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_version', models.CharField(blank=True, max_length=255, null=True)),
                ('action', models.CharField(choices=[(b'install', b'Install'), (b'upgrade', b'Upgrade'), (b'uninstall', b'Uninstall'), (b'skip', b'No change')], max_length=32)),
                ('status', models.CharField(choices=[(b'Pending', b'Pending'), (b'InProgress', b'In Progress'), (b'Succeeded', b'Succeeded'), (b'Failed', b'Failed'), (b'Cancelled', b'Cancelled')], max_length=32)),
                ('log', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField()),
                ('error', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='mpinstaller.InstallationError')),
                ('installation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='mpinstaller.PackageInstallation')),
                ('package', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='installation_steps', to='mpinstaller.Package')),
            ],
            options={
                'ordering': ['-installation__id', 'order'],
            },
        ),
        migrations.CreateModel(
            name='PackageVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('number', models.CharField(blank=True, max_length=32, null=True)),
                ('zip_url', models.URLField(blank=True, null=True)),
                ('repo_url', models.URLField(blank=True, null=True)),
                ('github_username', models.CharField(blank=True, max_length=255, null=True)),
                ('github_password', models.CharField(blank=True, max_length=255, null=True)),
                ('branch', models.CharField(blank=True, max_length=255, null=True)),
                ('subfolder', models.CharField(blank=True, max_length=255, null=True)),
                ('namespace_token', models.CharField(blank=True, help_text=b'If provided, all files in the archive will be scanned and the token will be replaced with the namespace provided.  For CumulusCI, the default token is %%%NAMESPACE%%%', max_length=255, null=True)),
                ('namespace', models.CharField(blank=True, help_text=b'If provided, the namespace_token will be replaced with this namespace.  If not provided, the token will be cleared.  Example: npsp', max_length=255, null=True)),
                ('package_name', models.CharField(blank=True, help_text=b"If configuring a Github repository for contributions, enter the package name for unmanaged deployments here.  This is used to retrieve a contribution's packaged metadata from a Salesforce org.", max_length=255, null=True)),
                ('content_intro', tinymce.models.HTMLField(blank=True, help_text=b'Optional version specific text to show in Package Information panel', null=True)),
                ('content_success', tinymce.models.HTMLField(blank=True, help_text=b'Optional version specific text shown after a successful installation.', null=True)),
                ('content_failure', tinymce.models.HTMLField(blank=True, help_text=b'Optional version specific text shown after a failed installation.', null=True)),
                ('conditions', models.ManyToManyField(blank=True, null=True, to='mpinstaller.MetadataCondition')),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='mpinstaller.Package')),
            ],
            options={
                'ordering': ['package__namespace', 'number'],
            },
        ),
        migrations.CreateModel(
            name='PackageVersionDependency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ActionEditPicklist',
            fields=[
                ('orgaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mpinstaller.OrgAction')),
                ('action', models.CharField(choices=[(b'insert', b'Insert if not existing'), (b'upsert', b'Upsert'), (b'delete', b'Delete')], max_length=16)),
                ('custom_object', models.CharField(max_length=255)),
                ('custom_field', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('default', models.BooleanField()),
            ],
            bases=('mpinstaller.orgaction', models.Model),
        ),
        migrations.CreateModel(
            name='ActionEditStageName',
            fields=[
                ('orgaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mpinstaller.OrgAction')),
                ('action', models.CharField(choices=[(b'insert', b'Insert if not existing'), (b'upsert', b'Upsert'), (b'delete', b'Delete')], max_length=16)),
                ('custom_object', models.CharField(max_length=255)),
                ('custom_field', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('default', models.BooleanField()),
                ('closed', models.BooleanField()),
                ('won', models.BooleanField()),
                ('probability', models.IntegerField(validators=[mpinstaller.models.validate_probability])),
                ('forecast_category', models.CharField(choices=[(b'Best Case', b'Best Case'), (b'Closed', b'Closed'), (b'Commit', b'Commit'), (b'Omitted', b'Omitted'), (b'Pipeline', b'Pipeline')], max_length=16)),
            ],
            options={
                'abstract': False,
            },
            bases=('mpinstaller.orgaction', models.Model),
        ),
        migrations.AddField(
            model_name='packageversiondependency',
            name='action',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='required_by', to='mpinstaller.OrgAction'),
        ),
        migrations.AddField(
            model_name='packageversiondependency',
            name='requires',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='required_by', to='mpinstaller.PackageVersion'),
        ),
        migrations.AddField(
            model_name='packageversiondependency',
            name='version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dependencies', to='mpinstaller.PackageVersion'),
        ),
        migrations.AddField(
            model_name='packageinstallationstep',
            name='version',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='installation_steps', to='mpinstaller.PackageVersion'),
        ),
        migrations.AddField(
            model_name='packageinstallation',
            name='version',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='installations', to='mpinstaller.PackageVersion'),
        ),
        migrations.AddField(
            model_name='package',
            name='current_beta',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_beta', to='mpinstaller.PackageVersion'),
        ),
        migrations.AddField(
            model_name='package',
            name='current_github',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_github', to='mpinstaller.PackageVersion'),
        ),
        migrations.AddField(
            model_name='package',
            name='current_prod',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_prod', to='mpinstaller.PackageVersion'),
        ),
        migrations.AddField(
            model_name='installationerror',
            name='content',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='errors', to='mpinstaller.InstallationErrorContent'),
        ),
        migrations.AddField(
            model_name='installationerror',
            name='fallback_content',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='errors_fallback', to='mpinstaller.InstallationErrorContent'),
        ),
    ]
